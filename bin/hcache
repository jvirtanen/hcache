#!/usr/bin/env ruby

home = ENV["HOME"]

cache_dir = "#{home}/.hcache/"
`mkdir -p #{cache_dir}`

GCC_DEFAULT_INCLUDES_FILE = "#{cache_dir}/gcc_default_includes"

def read_gcc_default_includes
  Marshal.load(IO.read(GCC_DEFAULT_INCLUDES_FILE))
end

def cache_gcc_default_includes
  result = []
  output = `echo | cpp -v 2>&1`

  lines = []
  output.each_line do |line|
    lines.push line
  end

  while !lines.empty?
    line = lines.shift
    break if line.match(/#include \"...\" search starts here:/)
  end

  while !lines.empty?
    line = lines.shift
    break if line.match(/#include <...> search starts here:/)
    next if line.match(/framework directory/)
    result.push line.strip
  end

  while !lines.empty?
    line = lines.shift
    break if line.match(/End of search list./)
    next if line.match(/framework directory/)
    result.push line.strip
  end

  file = File.new(GCC_DEFAULT_INCLUDES_FILE, 'w')
  file.write(Marshal.dump(result))
  file.close
end

def gcc_default_includes
  unless File.exist? GCC_DEFAULT_INCLUDES_FILE
    cache_gcc_default_includes
  end
  read_gcc_default_includes  
end
  
def rewrite_command(cache_dir, extra_args="")
  argv = ARGV.clone
  command = "#{argv.shift} "
  new_includes = gcc_default_includes
  old_includes = ""
  while !new_includes.empty? do
    include_dir = new_includes.shift
    command += "-I#{cache_dir}#{include_dir} "
  end
  while !argv.empty? do
    arg = argv.shift
    if arg.match(/^\-I/)
      include_dir = arg[2, arg.length]
      command += "-I#{cache_dir}#{include_dir} "
      old_includes += "-I#{include_dir} "
    else
      command += "#{arg} "    
    end
  end
  command += "#{extra_args} #{old_includes}"
  command
end

dep_output = `#{rewrite_command(cache_dir, "-M -MP")} | grep ":$" | sed -e "s/:$//g"`

puts "Dependencies:"
dep_output.each_line do |file|
  file.strip!
  if file.match(/^#{cache_dir}/)
    print "  [ HIT      ] "
    puts " #{file.gsub(/^#{cache_dir}/, "")}"
    next
  end
  target = "#{cache_dir}#{file}"
  if File.exists? target
    print "  [ UNCACHED ] "
  else
    print "  [ MISS     ] "
    `mkdir -p \`dirname #{target}\``
    `cp -f #{file} #{target}`
  end
  puts " #{file}"
end

%x[#{rewrite_command(cache_dir)}]

